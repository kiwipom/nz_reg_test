name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Backend Pipeline (Linting → Build → Tests)
  backend-pipeline:
    name: Backend Pipeline
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: nz_companies_register_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x ./backend/gradlew

    # 1. LINTING (Fast feedback)
    - name: Run backend linting
      run: |
        cd backend
        ./gradlew ktlintCheck

    # 2. BUILD (Compilation errors caught early)
    - name: Build backend
      run: |
        cd backend
        ./gradlew build -x test

    # 3. UNIT TESTS (After successful build)
    - name: Run backend unit tests
      run: |
        cd backend
        ./gradlew test --info
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: nz_companies_register_test
        DB_USERNAME: postgres
        DB_PASSWORD: postgres

    # TODO: Add backend integration tests in future iteration
    # - name: Run backend integration tests
    #   run: |
    #     cd backend
    #     ./gradlew integrationTest --info
    #   env:
    #     SPRING_PROFILES_ACTIVE: test
    #     DB_HOST: localhost
    #     DB_PORT: 5432
    #     DB_NAME: nz_companies_register_test
    #     DB_USERNAME: postgres
    #     DB_PASSWORD: postgres

    # 4. COVERAGE & QUALITY CHECKS
    - name: Generate backend test coverage report
      run: |
        cd backend
        ./gradlew jacocoTestReport

    - name: Check backend test coverage
      continue-on-error: true
      run: |
        cd backend
        ./gradlew jacocoTestCoverageVerification

    - name: Upload backend test coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./backend/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/build/reports/tests/
          backend/build/reports/jacoco/

  # Frontend Pipeline (Linting → Build → Tests)
  frontend-pipeline:
    name: Frontend Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    # 1. LINTING (Fast feedback)
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    # 2. BUILD (TypeScript compilation + Vite build)
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run typecheck

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    # 3. UNIT TESTS (After successful build)
    - name: Run frontend unit tests
      run: |
        cd frontend
        npm run test:coverage

    # 4. INTEGRATION TESTS (After unit tests)
    - name: Run frontend integration tests
      run: |
        cd frontend
        npm run test:integration

    - name: Upload frontend test coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results/

  # Infrastructure Pipeline (Linting → Tests)
  infrastructure-pipeline:
    name: Infrastructure Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install infrastructure dependencies
      run: |
        cd infrastructure/cdk
        pip install -r requirements.txt
        pip install -r test_requirements.txt

    # 1. LINTING (Fast feedback)
    - name: Run infrastructure linting
      run: |
        cd infrastructure/cdk
        black --check .
        flake8 .

    # 2. UNIT TESTS (Python doesn't need separate build step)
    - name: Run infrastructure unit tests
      run: |
        cd infrastructure/cdk
        python -m pytest tests/ -v --cov=. --cov-report=xml

    - name: Upload infrastructure test coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./infrastructure/cdk/coverage.xml
        flags: infrastructure
        name: infrastructure-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload infrastructure test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-test-results
        path: |
          infrastructure/cdk/coverage.xml
          infrastructure/cdk/.coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-pipeline, frontend-pipeline, infrastructure-pipeline]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java,javascript,python
        
    - name: Set up JDK for CodeQL
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js for CodeQL
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build Java code for CodeQL
      run: |
        cd backend
        chmod +x ./gradlew
        ./gradlew compileJava compileKotlin -x test
        
    - name: Build JavaScript code for CodeQL
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build Artifacts (for deployment)
  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [backend-pipeline, frontend-pipeline, infrastructure-pipeline]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build backend artifacts
      run: |
        cd backend
        chmod +x ./gradlew
        ./gradlew build -x test

    - name: Build frontend artifacts
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/build/libs/
          frontend/dist/

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-pipeline, frontend-pipeline, infrastructure-pipeline, security-scan]
    if: always()

    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          backend-test-results/**/TEST-*.xml
          frontend-test-results/**/junit.xml
          infrastructure-test-results/**/junit.xml

    - name: Create test summary
      if: always()
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: See artifacts and Codecov" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: See artifacts and Codecov" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure: See artifacts and Codecov" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Security Scan" >> $GITHUB_STEP_SUMMARY
        echo "- Trivy: See GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL: See GitHub Security tab" >> $GITHUB_STEP_SUMMARY

# Workflow Status Badge
# Add this to your README.md:
# ![CI Pipeline](https://github.com/your-org/nz_reg_test/workflows/CI%20Pipeline/badge.svg)